1. Разработать REST-сервис, реализующий Least Recently Used (LRU) cache (https://en.wikipedia.org/wiki/Cache_replacement_policies#LRU)
с максимальной вместимостью (capacity) и обрабатывающий 2 запроса:
GET key - возвращает значение ключа, если ключ существует, иначе -1.
POST key, value - обновляет значение ключа, если он существует, иначе, добавляет пару key, value в cache. В случае, если размер кеша
превышает capacity, то из кеша удаляется пара key1, value1, которая не использовалась дольше всего и на ее место записывается key, value. 
Например:
Запуск сервиса с максимальной вместимостью 2
POST (1, 1) // кеш {1=1}
POST (2, 2) // кеш {1=1, 2=2}
GET(1)      // вернет 1
POST(3, 3)  // удаление ключа 2, кеш {1=1, 3=3}
GET(2)      // вернет -1 (нет ключа в кеше)
POST(4, 4)  // удаление ключа 1, кеш {4=4, 3=3}
GET(1)      // вернет -1 (нет ключа в кеше)
GET(3)      // вернет 3
GET(4)      // вернет 4

Ограничения и условия:
- сервис необходимо реализовать с использованием одного из фреймворков(например drogon, cpprestsdk или любой другой) 
- cервис должен быть написан на C++ с использованием классов, а также возможностей предоставляемых современными стандартами (вплоть до версии 20 года)
- сборочная система CMake
- сервис должен работать под Windows и Linux
- сервис должен обеспечивать потокобезопасность
- вместимость (capacity) и число потоков передается через параметры командной строки при запуске сервиса, например ./service 5 2
- post запрос должен быть в формате json {"key" : 1, "value" : 2}
- необходимо выслать исходный код и бинарники с библиотеками для запуска(под Win&Linux)
- ограничения не оговоренные в условии трактовать по своему усмотрению

2. Необходимо написать набор тестов для сервиса (можно использовать bash, python, curl, postman и т.д.) или просто выполнить ручное тестирование и описать тесты словесно. 

